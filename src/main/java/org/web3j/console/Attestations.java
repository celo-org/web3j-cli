/*
 * Copyright 2020 Web3 Labs Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.web3j.console;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.reactivex.Flowable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Attestations extends Contract {
    public static final String BINARY =
            "60806040526000620000196401000000006200006e810204565b60008054600160a060020a031916600160a060020a0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600160025562000072565b3390565b614e9780620000826000396000f3fe608060405234801561001057600080fd5b50600436106102995760003560e060020a900480638f32d59b1161016b578063df4da461116100d2578063ec6830721161008b578063ec68307214610d8e578063f2fde38b14610de2578063f3ff26c614610e08578063fae8db0a14610e34578063fb6a2e5314610e51578063fd536f5d14610e8357610299565b8063df4da46114610ca5578063e02659ce14610cad578063e221932e14610cca578063e3d0f66f14610ce7578063e50e652d14610d43578063e831be5814610d6057610299565b8063b45eb7da11610124578063b45eb7da14610ba1578063b5599cc614610ba9578063bb46942f14610c0d578063bd93f99814610c30578063be2c47a614610c56578063d02e0f0c14610c7357610299565b80638f32d59b1461099e57806396357c0a146109a65780639a7b3be714610b395780639b2b592f14610b41578063a6437e7314610b5e578063a91ee0dc14610b7b57610299565b80635fc5c9161161020f5780637b103999116101c85780637b103999146108d05780638218c6fe146108d857806387ee8a0f146108e057806389d35286146108e85780638a883626146108f05780638da5cb5b1461099657610299565b80635fc5c916146107c0578063623d5931146107ec57806367960e9114610812578063715018a6146108b85780637385e5da146108c05780637796a684146108c857610299565b80634b2c2f44116102615780634b2c2f44146104cc5780634eef7e851461057257806351cff8d9146106e5578063596abea51461070d5780635ce9bc071461075c5780635d180adb1461079d57610299565b806303cc1aff1461029e578063123633ea1461030b578063158ef93e1461034457806323f0ab65146103605780633b1eb4bf1461049d575b600080fd5b6102bb600480360360208110156102b457600080fd5b5035610f66565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f75781810151838201526020016102df565b505050509050019250505060405180910390f35b6103286004803603602081101561032157600080fd5b5035610fd2565b60408051600160a060020a039092168252519081900360200190f35b61034c6110e6565b604080519115158252519081900360200190f35b61034c6004803603606081101561037657600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156103a157600080fd5b8201836020820111156103b357600080fd5b803590602001918460018302840111640100000000831117156103d557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561042857600080fd5b82018360208201111561043a57600080fd5b8035906020019184600183028401116401000000008311171561045c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611107945050505050565b6104ba600480360360208110156104b357600080fd5b503561128f565b60408051918252519081900360200190f35b6104ba600480360360208110156104e257600080fd5b8101906020810181356401000000008111156104fd57600080fd5b82018360208201111561050f57600080fd5b8035906020019184600183028401116401000000008311171561053157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506112a8945050505050565b61059e6004803603604081101561058857600080fd5b5080359060200135600160a060020a0316611405565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156105ea5781810151838201526020016105d2565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610629578181015183820152602001610611565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610668578181015183820152602001610650565b50505050905001858103825286818151815260200191508051906020019080838360005b838110156106a457818101518382015260200161068c565b50505050905090810190601f1680156106d15780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61070b600480360360208110156106fb57600080fd5b5035600160a060020a03166117a9565b005b6107396004803603604081101561072357600080fd5b5080359060200135600160a060020a031661196b565b6040805163ffffffff938416815291909216602082015281519081900390910190f35b610328600480360360a081101561077257600080fd5b50803590600160a060020a036020820135169060ff60408201351690606081013590608001356119a9565b610328600480360360408110156107b357600080fd5b5080359060200135611c2a565b6102bb600480360360408110156107d657600080fd5b5080359060200135600160a060020a0316611d40565b6104ba6004803603602081101561080257600080fd5b5035600160a060020a0316611dc6565b6104ba6004803603602081101561082857600080fd5b81019060208101813564010000000081111561084357600080fd5b82018360208201111561085557600080fd5b8035906020019184600183028401116401000000008311171561087757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611de1945050505050565b61070b611f33565b6104ba611fd6565b6104ba611fe7565b610328611fed565b6104ba611ffc565b6104ba612002565b6104ba61211f565b6104ba6004803603602081101561090657600080fd5b81019060208101813564010000000081111561092157600080fd5b82018360208201111561093357600080fd5b8035906020019184600183028401116401000000008311171561095557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612125945050505050565b610328612277565b61034c612286565b610a16600480360360208110156109bc57600080fd5b8101906020810181356401000000008111156109d757600080fd5b8201836020820111156109e957600080fd5b80359060200191846020830284011164010000000083111715610a0b57600080fd5b5090925090506122aa565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015610a62578181015183820152602001610a4a565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610aa1578181015183820152602001610a89565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610ae0578181015183820152602001610ac8565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610b1f578181015183820152602001610b07565b505050509050019850505050505050505060405180910390f35b6104ba612689565b6104ba60048036036020811015610b5757600080fd5b5035612694565b61070b60048036036020811015610b7457600080fd5b503561279f565b61070b60048036036020811015610b9157600080fd5b5035600160a060020a0316612868565b6104ba61296b565b610bdd60048036036060811015610bbf57600080fd5b50803590600160a060020a0360208201358116916040013516612971565b6040805160ff909416845263ffffffff9092166020840152600160a060020a031682820152519081900360600190f35b61070b60048036036040811015610c2357600080fd5b50803590602001356129e9565b6104ba60048036036020811015610c4657600080fd5b5035600160a060020a0316612bf7565b61070b60048036036020811015610c6c57600080fd5b5035612c09565b61070b60048036036060811015610c8957600080fd5b5080359060208101359060400135600160a060020a0316612cd2565b6104ba613117565b61070b60048036036020811015610cc357600080fd5b5035613207565b61070b60048036036020811015610ce057600080fd5b50356132d0565b610d1360048036036040811015610cfd57600080fd5b5080359060200135600160a060020a03166133db565b6040805163ffffffff9485168152929093166020830152600160a060020a03168183015290519081900360600190f35b6104ba60048036036020811015610d5957600080fd5b503561342b565b6104ba60048036036040811015610d7657600080fd5b50600160a060020a0381358116916020013516613469565b610dc9600480360360c0811015610da457600080fd5b5080359060208101359060408101359060608101359060808101359060a00135613486565b6040805192835260208301919091528051918290030190f35b61070b60048036036020811015610df857600080fd5b5035600160a060020a031661364d565b61070b60048036036040811015610e1e57600080fd5b50600160a060020a0381351690602001356136a5565b6104ba60048036036020811015610e4a57600080fd5b5035613787565b61070b60048036036080811015610e6757600080fd5b5080359060ff6020820135169060408101359060600135613892565b61070b600480360360c0811015610e9957600080fd5b600160a060020a038235169160208101359160408201359160608101359181019060a081016080820135640100000000811115610ed557600080fd5b820183602082011115610ee757600080fd5b80359060200191846020830284011164010000000083111715610f0957600080fd5b919390929091602081019035640100000000811115610f2757600080fd5b820183602082011115610f3957600080fd5b80359060200191846020830284011164010000000083111715610f5b57600080fd5b509092509050613aec565b600081815260036020908152604091829020805483518184028101840190945280845260609392830182828015610fc657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610fa8575b50505050509050919050565b60408051602080820184905243828401528251808303840181526060928301938490528051600094859360fa939282918401908083835b602083106110285780518252601f199092019160209182019101611009565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114611088576040519150601f19603f3d011682016040523d82523d6000602084013e61108d565b606091505b50925090508015156110d35760405160e560020a62461bcd02815260040180806020018281038252603d815260200180614b74603d913960400191505060405180910390fd5b6110de826000613c77565b949350505050565b60005474010000000000000000000000000000000000000000900460ff1681565b60008060fb600160a060020a03168585856040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183805190602001908083835b602083106111715780518252601f199092019160209182019101611152565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106111b95780518252601f19909201916020918201910161119a565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b6020831061121e5780518252601f1990920191602091820191016111ff565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461127e576040519150601f19603f3d011682016040523d82523d6000602084013e611283565b606091505b50909695505050505050565b60006112a28261129d613117565b613c8a565b92915050565b60006060600060f4600160a060020a0316846040516020018082805190602001908083835b602083106112ec5780518252601f1990920191602091820191016112cd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061134f5780518252601f199092019160209182019101611330565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146113af576040519150601f19603f3d011682016040523d82523d6000602084013e6113b4565b606091505b50925090508015156113fa5760405160e560020a62461bcd028152600401808060200182810382526038815260200180614b126038913960400191505060405180910390fd5b6110de826000613cbe565b6000828152600360209081526040808320600160a060020a0385168452600190810190925282206060928392839283929091820190805b82548110156114b657611485846002016000858481548110151561145c57fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020613d27565b1561149e5761149b82600163ffffffff613d6016565b91505b6114af81600163ffffffff613d6016565b905061143c565b506060816040519080825280602002602001820160405280156114e3578160200160208202803883390190505b509050606082604051908082528060200260200182016040528015611512578160200160208202803883390190505b5090506000805b855481101561161e57611539876002016000888481548110151561145c57fe5b1561160657866002016000878381548110151561155257fe5b600091825260208083209190910154600160a060020a03168352820192909252604001902054845161010090910463ffffffff169085908490811061159357fe5b63ffffffff90921660209283029091019091015285548690829081106115b557fe5b6000918252602090912001548351600160a060020a03909116908490849081106115db57fe5b600160a060020a0390921660209283029091019091015261160382600163ffffffff613d6016565b91505b61161781600163ffffffff613d6016565b9050611519565b5060608061162a613dbd565b600160a060020a0316638adaf96f856040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019060200280838360005b8381101561168b578181015183820152602001611673565b505050509050019250505060006040518083038186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156116eb57600080fd5b81019080805164010000000081111561170357600080fd5b8201602081018481111561171657600080fd5b815185602082028301116401000000008211171561173357600080fd5b5050929190602001805164010000000081111561174f57600080fd5b8201602081018481111561176257600080fd5b815164010000000081118282018710171561177c57600080fd5b50509291905050508092508193505050848483839b509b509b509b50505050505050505092959194509250565b600160a060020a0381166000908152600860209081526040808320338452909152812054908111611824576040805160e560020a62461bcd02815260206004820152601760248201527f76616c756520776173206e656761746976652f7a65726f000000000000000000604482015290519081900360640190fd5b600160a060020a03821660008181526008602090815260408083203380855290835281842084905581517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019190915260248101869052905163a9059cbb93604480840194938390030190829087803b1580156118a557600080fd5b505af11580156118b9573d6000803e3d6000fd5b505050506040513d60208110156118cf57600080fd5b50511515611927576040805160e560020a62461bcd02815260206004820152601560248201527f746f6b656e207472616e73666572206661696c65640000000000000000000000604482015290519081900360640190fd5b604080518281529051600160a060020a0384169133917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989181900360200190a35050565b6000918252600360209081526040808420600160a060020a039390931684526001909201905290205463ffffffff6401000000008204811692911690565b6040805160208082018890526c01000000000000000000000000600160a060020a038816028284015282516034818403018152605483018085528151918301919091207fb3abdb0c000000000000000000000000000000000000000000000000000000009091526058830181905260ff871660788401526098830186905260b88301859052925160009392849273__$1e5edbae18cef1101391fb8de0969cb39f$__9263b3abdb0c9260d8808201939291829003018186803b158015611a6e57600080fd5b505af4158015611a82573d6000803e3d6000fd5b505050506040513d6020811015611a9857600080fd5b505190506000611aa6613dbd565b600160a060020a0316637b2434cb836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611afe57600080fd5b505afa158015611b12573d6000803e3d6000fd5b505050506040513d6020811015611b2857600080fd5b505160008a8152600360209081526040808320600160a060020a03808e168552600191820184528285209086168552600201909252909120919250815460ff166002811115611b7357fe5b14611bb25760405160e560020a62461bcd02815260040180806020018281038252603b815260200180614be6603b913960400191505060405180910390fd5b8054611bc890610100900463ffffffff16613e92565b15611c1d576040805160e560020a62461bcd02815260206004820152601560248201527f4174746573746174696f6e2074696d6564206f75740000000000000000000000604482015290519081900360640190fd5b5098975050505050505050565b6040805160208082018590528183018490528251808303840181526060928301938490528051600094859360fa939282918401908083835b60208310611c815780518252601f199092019160209182019101611c62565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114611ce1576040519150601f19603f3d011682016040523d82523d6000602084013e611ce6565b606091505b5092509050801515611d2c5760405160e560020a62461bcd028152600401808060200182810382526036815260200180614c216036913960400191505060405180910390fd5b611d37826000613c77565b95945050505050565b6000828152600360209081526040808320600160a060020a03851684526001908101835292819020909201805483518184028101840190945280845260609392830182828015611db957602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611d9b575b5050505050905092915050565b600160a060020a031660009081526007602052604090205490565b60006060600060f6600160a060020a0316846040516020018082805190602001908083835b60208310611e255780518252601f199092019160209182019101611e06565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611e885780518252601f199092019160209182019101611e69565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114611ee8576040519150601f19603f3d011682016040523d82523d6000602084013e611eed565b606091505b50925090508015156113fa5760405160e560020a62461bcd028152600401808060200182810382526023815260200180614e496023913960400191505060405180910390fd5b611f3b612286565b1515611f7f576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000611fe14361342b565b90505b90565b60065490565b600154600160a060020a031681565b60065481565b60006060600060f9600160a060020a031643604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106120625780518252601f199092019160209182019101612043565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146120c2576040519150601f19603f3d011682016040523d82523d6000602084013e6120c7565b606091505b509250905080151561210d5760405160e560020a62461bcd028152600401808060200182810382526035815260200180614bb16035913960400191505060405180910390fd5b612118826000613c77565b9250505090565b60055481565b60006060600060f7600160a060020a0316846040516020018082805190602001908083835b602083106121695780518252601f19909201916020918201910161214a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106121cc5780518252601f1990920191602091820191016121ad565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461222c576040519150601f19603f3d011682016040523d82523d6000602084013e612231565b606091505b50925090508015156110d35760405160e560020a62461bcd028152600401808060200182810382526031815260200180614df26031913960400191505060405180910390fd5b600054600160a060020a031690565b60008054600160a060020a031661229b613ec4565b600160a060020a031614905090565b6060808080600085116122f15760405160e560020a62461bcd028152600401808060200182810382526028815260200180614cc36028913960400191505060405180910390fd5b606080612330888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613ec892505050565b809250819350505060608151604051908082528060200260200182016040528015612365578160200160208202803883390190505b50905060608251604051908082528060200260200182016040528015612395578160200160208202803883390190505b5090506000805b8a811015612677576060600360008e8e858181106123b657fe5b90506020020135815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561242257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612404575b50939450600093505050505b878381518110151561243c57fe5b9060200190602002015181101561265c57612455613dbd565b600160a060020a0316631fd9afa5838381518110151561247157fe5b906020019060200201516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156124c457600080fd5b505afa1580156124d8573d6000803e3d6000fd5b505050506040513d60208110156124ee57600080fd5b505187518890869081106124fe57fe5b600160a060020a03909216602092830290910190910152600360008f8f8681811061252557fe5b9050602002013581526020019081526020016000206001016000838381518110151561254d57fe5b602090810291909101810151600160a060020a0316825281019190915260400160002054865164010000000090910463ffffffff169087908690811061258f57fe5b67ffffffffffffffff909216602092830290910190910152600360008f8f868181106125b757fe5b905060200201358152602001908152602001600020600101600083838151811015156125df57fe5b6020908102909101810151600160a060020a0316825281019190915260400160002054855163ffffffff9091169086908690811061261957fe5b67ffffffffffffffff90921660209283029091019091015261264284600163ffffffff613d6016565b935061265581600163ffffffff613d6016565b905061242e565b50612670905081600163ffffffff613d6016565b905061239c565b50939a92995090975095509350505050565b6000611fe14361128f565b60006060600060f9600160a060020a031684604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106126f45780518252601f1990920191602091820191016126d5565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114612754576040519150601f19603f3d011682016040523d82523d6000602084013e612759565b606091505b50925090508015156110d35760405160e560020a62461bcd02815260040180806020018281038252602e8152602001806149fd602e913960400191505060405180910390fd5b6127a7612286565b15156127eb576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b6000811161282d5760405160e560020a62461bcd028152600401808060200182810382526030815260200180614ae26030913960400191505060405180910390fd5b60048190556040805182815290517f4fbe976a07a9260091c2d347f8780c4bc636392e34d5b249b367baf8a5c7ca699181900360200190a150565b612870612286565b15156128b4576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b600160a060020a0381161515612914576040805160e560020a62461bcd02815260206004820181905260248201527f43616e6e6f7420726567697374657220746865206e756c6c2061646472657373604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383169081179091556040517f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b90600090a250565b60045481565b6000838152600360209081526040808320600160a060020a038087168552600190910183528184209085168452600290810190925282208054839283929160ff16908111156129bc57fe5b90549097610100820463ffffffff16975065010000000000909104600160a060020a031695509350505050565b600082815260036020526040902054808210612a4f576040805160e560020a62461bcd02815260206004820152601060248201527f496e64657820697320696e76616c696400000000000000000000000000000000604482015290519081900360640190fd5b6000838152600360205260409020805483908110612a6957fe5b600091825260209091200154600160a060020a03163314612ad4576040805160e560020a62461bcd02815260206004820152601f60248201527f496e64657820646f6573206e6f74206d61746368206d73672e73656e64657200604482015290519081900360640190fd5b6000612ae782600163ffffffff613ff216565b9050828114612b6c576000848152600360205260409020805482908110612b0a57fe5b6000918252602080832090910154868352600390915260409091208054600160a060020a039092169185908110612b3d57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6000848152600360205260408120805483908110612b8657fe5b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931790925585815260039091526040902054612bd8906001613ff2565b6000858152600360205260409020612bf0908261496f565b5050505050565b60076020526000908152604090205481565b612c11612286565b1515612c55576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b60008111612c975760405160e560020a62461bcd0281526004018080602001828103825260288152602001806149b36028913960400191505060405180910390fd5b60068190556040805182815290517fc1f217a1246a98ce04e938768309107630ed86c1e0e9f9995af28e23a9c061789181900360200190a150565b6002805460010190819055600160a060020a03821660009081526007602052604081205411612d355760405160e560020a62461bcd0281526004018080602001828103825260228152602001806149db6022913960400191505060405180910390fd5b600160a060020a0382166000818152600760205260409020546323b872dd9033903090612d68908863ffffffff61403416565b6040805160e060020a63ffffffff8716028152600160a060020a0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b158015612dbc57600080fd5b505af1158015612dd0573d6000803e3d6000fd5b505050506040513d6020811015612de657600080fd5b50511515612e285760405160e560020a62461bcd02815260040180806020018281038252602b815260200180614c57602b913960400191505060405180910390fd5b60008311612e6a5760405160e560020a62461bcd02815260040180806020018281038252602a815260200180614b4a602a913960400191505060405180910390fd5b600654831115612ec4576040805160e560020a62461bcd02815260206004820152601f60248201527f546f6f206d616e79206174746573746174696f6e732072657175657374656400604482015290519081900360640190fd5b6000848152600360209081526040808320338452600281019092529091205463ffffffff161580612f115750336000908152600282016020526040902054612f119063ffffffff16613e92565b80612f3a5750336000908152600282016020526040902054612f389063ffffffff16614094565b155b1515612f7a5760405160e560020a62461bcd028152600401808060200182810382526039815260200180614a816039913960400191505060405180910390fd5b612f834361411d565b3360009081526002830160205260409020805463ffffffff191663ffffffff92909216919091179055612fb58461411d565b3360009081526002830160209081526040808320805467ffffffff00000000191664010000000063ffffffff96871602177fffffffff0000000000000000000000000000000000000000ffffffffffffffff1668010000000000000000600160a060020a038a1602179055600185019091529020546130429161303d918116908790613d6016565b61411d565b336000818152600184016020908152604091829020805463ffffffff191663ffffffff95909516949094179093558051878152600160a060020a038716938101939093528051919288927f381545d9b1fffcb94ffbbd0bccfff9f1fb3acd474d34f7d59112a5c9973fee49929181900390910190a3506002548114613111576040805160e560020a62461bcd02815260206004820152600e60248201527f7265656e7472616e742063616c6c000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b604080516000808252602082019283905281519092606092849260f89290819081908082805b6020831061315c5780518252601f19909201916020918201910161313d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146131bc576040519150601f19603f3d011682016040523d82523d6000602084013e6131c1565b606091505b509250905080151561210d5760405160e560020a62461bcd028152600401808060200182810382526025815260200180614d126025913960400191505060405180910390fd5b61320f612286565b1515613253576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b600081116132955760405160e560020a62461bcd028152600401808060200182810382526030815260200180614a2b6030913960400191505060405180910390fd5b60058190556040805182815290517f954fa47fa6f4e8017b99f93c73f4fbe599d786f9f5da73fe9086ab473fb455d89181900360200190a150565b600081815260036020908152604080832033845260028101909252822054909163ffffffff909116116133375760405160e560020a62461bcd028152600401808060200182810382526037815260200180614d8f6037913960400191505060405180910390fd5b3360009081526002820160205260409020546133589063ffffffff16613e92565b156133975760405160e560020a62461bcd028152600401808060200182810382526023815260200180614d6c6023913960400191505060405180910390fd5b6133a082614169565b33600090815260029091016020526040902080547fffffffff0000000000000000000000000000000000000000000000000000000016905550565b6000918252600360209081526040808420600160a060020a0393841685526002019091529091205463ffffffff808216936401000000008304909116926801000000000000000090920490911690565b60006112a2600361345d6002613451600261344588612694565b9063ffffffff61403416565b9063ffffffff613d6016565b9063ffffffff6146d016565b600860209081526000928352604080842090915290825290205481565b600080861580159061349757508415155b15156134ed576040805160e560020a62461bcd02815260206004820152601560248201527f612064656e6f6d696e61746f72206973207a65726f0000000000000000000000604482015290519081900360640190fd5b6000806000606060fc600160a060020a03168c8c8c8c8c8c6040516020018087815260200186815260200185815260200184815260200183815260200182815260200196505050505050506040516020818303038152906040526040518082805190602001908083835b602083106135765780518252601f199092019160209182019101613557565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146135d6576040519150601f19603f3d011682016040523d82523d6000602084013e6135db565b606091505b5090925090508115156136225760405160e560020a62461bcd028152600401808060200182810382526027815260200180614ceb6027913960400191505060405180910390fd5b61362d816000613c77565b935061363a816020613c77565b939c939b50929950505050505050505050565b613655612286565b1515613699576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b6136a281614712565b50565b6136ad612286565b15156136f1576040805160e560020a62461bcd0281526020600482018190526024820152600080516020614ca3833981519152604482015290519081900360640190fd5b600081116137335760405160e560020a62461bcd028152600401808060200182810382526028815260200180614aba6028913960400191505060405180910390fd5b600160a060020a038216600081815260076020908152604091829020849055815184815291517f7cf8b633f218e9f9bc2c06107bcaddcfee6b90580863768acdcfd4f05d7af3949281900390910190a25050565b60006060600060f5600160a060020a031684604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106137e75780518252601f1990920191602091820191016137c8565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114613847576040519150601f19603f3d011682016040523d82523d6000602084013e61384c565b606091505b50925090508015156113fa5760405160e560020a62461bcd02815260040180806020018281038252602c815260200180614dc6602c913960400191505060405180910390fd5b60006138a185338686866119a9565b60008681526003602090815260408083203384526001018252808320600160a060020a0380861685526002909101909252909120805492935091650100000000009004166138ee4361411d565b825478ffffffffffffffffffffffffffffffffffffffff00000000001960ff1964ffffffff001990921661010063ffffffff9485160217919091166002171683556000888152600360209081526040808320338452600190810190925290912080549092640100000000909104811691820116116139b6576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d617468333220696e7465676572206f766572666c6f770000000000604482015290519081900360640190fd5b805467ffffffff000000001981166401000000009182900463ffffffff9081166001018116909202178255600160a060020a0383811660009081526007602090815260408083205460088352818420948a16845293909152902054613a1e92909190613d6016565b600160a060020a0383811660009081526008602090815260408083209389168352928152828220939093558a815260038352818120338252600180820190945291902054909164010000000090910463ffffffff161415613aa957805460018101825560008281526020902001805473ffffffffffffffffffffffffffffffffffffffff1916331790555b604051600160a060020a0386169033908b907f414ff2c18c092697c4b8de49f515ac44f8bebc19b24553cf58ace913a6ac639d90600090a4505050505050505050565b60005474010000000000000000000000000000000000000000900460ff1615613b5f576040805160e560020a62461bcd02815260206004820152601c60248201527f636f6e747261637420616c726561647920696e697469616c697a656400000000604482015290519081900360640190fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055613b9d33614712565b613ba688612868565b613baf8761279f565b613bb886613207565b613bc185612c09565b600083118015613bd057508281145b1515613c105760405160e560020a62461bcd028152600401808060200182810382526035815260200180614d376035913960400191505060405180910390fd5b60005b83811015613c6c57613c54858583818110613c2a57fe5b90506020020135600160a060020a03168484848181101515613c4857fe5b905060200201356136a5565b613c6581600163ffffffff613d6016565b9050613c13565b505050505050505050565b6000613c838383613cbe565b9392505050565b6000808284811515613c9857fe5b0490508284811515613ca657fe5b061515613cb45790506112a2565b60010190506112a2565b600081602001835110151515613d1e576040805160e560020a62461bcd02815260206004820152601460248201527f736c6963696e67206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b50016020015190565b60006001825460ff166002811115613d3b57fe5b1480156112a257508154613d5990610100900463ffffffff16613e92565b1592915050565b600082820183811015613c83576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600154604080517f4163636f756e747300000000000000000000000000000000000000000000000060208083019190915282518083036008018152602883018085528151918301919091207fdcf0aaed00000000000000000000000000000000000000000000000000000000909152602c8301529151600093600160a060020a03169263dcf0aaed92604c8082019391829003018186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d6020811015613e8b57600080fd5b5051905090565b6000613ebb600454836fffffffffffffffffffffffffffffffff16613d6090919063ffffffff16565b43101592915050565b3390565b60608060008351111515613f105760405160e560020a62461bcd028152600401808060200182810382526028815260200180614cc36028913960400191505060405180910390fd5b600080905060608451604051908082528060200260200182016040528015613f42578160200160208202803883390190505b50905060005b8551811015613fb9576000600360008884815181101515613f6557fe5b60209081029091018101518252810191909152604001600020548351948101949091508190849084908110613f9657fe5b6020908102909101015250613fb281600163ffffffff613d6016565b9050613f48565b508082604051908082528060200260200182016040528015613fe5578160200160208202803883390190505b5090945092505050915091565b6000613c8383836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506147c4565b6000821515614045575060006112a2565b82820282848281151561405457fe5b0414613c835760405160e560020a62461bcd028152600401808060200182810382526021815260200180614c826021913960400191505060405180910390fd5b60006141156140a161485e565b600160a060020a031663e45def956040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156140dc57600080fd5b505afa1580156140f0573d6000803e3d6000fd5b505050506040513d602081101561410657600080fd5b5051839063ffffffff613d6016565b431092915050565b600064010000000082106141655760405160e560020a62461bcd028152600401808060200182810382526026815260200180614e236026913960400191505060405180910390fd5b5090565b600081815260036020908152604080832033845260018101835281842060029091019092528220909161419a61485e565b6005548354600160a060020a03929092169163fc484726916141c69163ffffffff9081169190613d6016565b6040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156141fd57600080fd5b505afa158015614211573d6000803e3d6000fd5b505050506040513d602081101561422757600080fd5b505190506000614235613dbd565b90506000614241612002565b905060608160405190808252806020026020018201604052801561426f578160200160208202803883390190505b50905060005b8281101561429e5780828281518110151561428c57fe5b60209081029091010152600101614275565b508454640100000000900463ffffffff16821015614306576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f7420656e6f75676820697373756572730000000000000000000000000000604482015290519081900360640190fd5b60005b8554640100000000900463ffffffff168110156146c65760008311614378576040805160e560020a62461bcd02815260206004820152601260248201527f6e6f7420656e6f75676820697373756572730000000000000000000000000000604482015290519081900360640190fd5b60408051602080820197909752815180820388018152908201909152805195019490942093600083868115156143aa57fe5b06905060006143cf84838151811015156143c057fe5b90602001906020020151610fd2565b9050600086600160a060020a03166393c5c487836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561442c57600080fd5b505afa158015614440573d6000803e3d6000fd5b505050506040513d602081101561445657600080fd5b5051600160a060020a038116600090815260028c0160205260408120919250815460ff16600281111561448557fe5b148015614513575087600160a060020a031663c2e0ee20836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156144e657600080fd5b505afa1580156144fa573d6000803e3d6000fd5b505050506040513d602081101561451057600080fd5b50515b156146795761452985600163ffffffff613d6016565b8154909550600190829060ff1916828002179055508960000160009054906101000a900463ffffffff168160000160016101000a81548163ffffffff021916908363ffffffff1602179055508960000160089054906101000a9004600160a060020a03168160000160056101000a815481600160a060020a030219169083600160a060020a031602179055508a6001018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a815481600160a060020a030219169083600160a060020a031602179055505081600160a060020a031633600160a060020a03168d7faf7f470b643316cf44c1f2898328a075e7602945b4f8584f48ba4ad2d8a2ea9d8d60000160089054906101000a9004600160a060020a03166040518082600160a060020a0316600160a060020a0316815260200191505060405180910390a45b61468a87600163ffffffff613ff216565b9650858781518110151561469a57fe5b9060200190602002015186858151811015156146b257fe5b602090810290910101525061430992505050565b5050505050505050565b6000613c8383836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614902565b600160a060020a038116151561475c5760405160e560020a62461bcd028152600401808060200182810382526026815260200180614a5b6026913960400191505060405180910390fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600081848411156148565760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561481b578181015183820152602001614803565b50505050905090810190601f1680156148485780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600154604080517f52616e646f6d000000000000000000000000000000000000000000000000000060208083019190915282518083036006018152602683018085528151918301919091207fdcf0aaed00000000000000000000000000000000000000000000000000000000909152602a8301529151600093600160a060020a03169263dcf0aaed92604a8082019391829003018186803b158015613e6157600080fd5b6000818184116149575760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561481b578181015183820152602001614803565b506000838581151561496557fe5b0495945050505050565b81548183558181111561499357600083815260209020614993918101908301614998565b505050565b611fe491905b80821115614165576000815560010161499e56fe6d61784174746573746174696f6e732068617320746f2062652067726561746572207468616e2030496e76616c6964206174746573746174696f6e52657175657374466565546f6b656e6572726f722063616c6c696e67206e756d62657256616c696461746f7273496e53657420707265636f6d70696c6573656c6563744973737565727357616974426c6f636b732068617320746f2062652067726561746572207468616e20304f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354686572652065786973747320616e20756e657870697265642c20756e73656c6563746564206174746573746174696f6e2072657175657374596f75206861766520746f20737065636966792061206665652067726561746572207468616e20306174746573746174696f6e457870697279426c6f636b732068617320746f2062652067726561746572207468616e20306572726f722063616c6c696e672067657456657269666965645365616c4269746d617046726f6d48656164657220707265636f6d70696c65596f75206861766520746f2072657175657374206174206c656173742031206174746573746174696f6e6572726f722063616c6c696e672076616c696461746f725369676e65724164647265737346726f6d43757272656e7453657420707265636f6d70696c656572726f722063616c6c696e67206e756d62657256616c696461746f7273496e43757272656e7453657420707265636f6d70696c654174746573746174696f6e20636f646520646f6573206e6f74206d6174636820616e79206f75747374616e64696e67206174746573746174696f6e6572726f722063616c6c696e672076616c696461746f725369676e65724164647265737346726f6d53657420707265636f6d70696c655472616e73666572206f66206174746573746174696f6e20726571756573742066656573206661696c6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572596f75206861766520746f2070617373206174206c65617374206f6e65206964656e7469666965726572726f722063616c6c696e67206672616374696f6e4d756c45787020707265636f6d70696c656572726f722063616c6c696e672067657445706f636853697a6520707265636f6d70696c656174746573746174696f6e52657175657374466565546f6b656e732073706563696669636174696f6e2077617320696e76616c6964546865206174746573746174696f6e20726571756573742068617320657870697265644e6f20756e73656c6563746564206174746573746174696f6e207265717565737420746f2073656c656374206973737565727320666f726572726f722063616c6c696e6720676574506172656e745365616c4269746d617020707265636f6d70696c656572726f722063616c6c696e6720676574426c6f636b4e756d62657246726f6d48656164657220707265636f6d70696c6553616665436173743a2076616c756520646f65736e27742066697420696e20333220626974736572726f722063616c6c696e67206861736848656164657220707265636f6d70696c65a165627a7a723058201ce58c6f989aed151a6fd27957499ba324ab6db21242513be48889253b60855d0029\n"
                    + "\n"
                    + "// $1e5edbae18cef1101391fb8de0969cb39f$ -> /Users/amyslawson/Documents/celo/celo-monorepo/packages/protocol/contracts/common/Signatures.sol:Signatures";

    public static final String FUNC_LOOKUPACCOUNTSFORIDENTIFIER = "lookupAccountsForIdentifier";

    public static final String FUNC_VALIDATORSIGNERADDRESSFROMCURRENTSET =
            "validatorSignerAddressFromCurrentSet";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_CHECKPROOFOFPOSSESSION = "checkProofOfPossession";

    public static final String FUNC_GETEPOCHNUMBEROFBLOCK = "getEpochNumberOfBlock";

    public static final String FUNC_GETVERIFIEDSEALBITMAPFROMHEADER =
            "getVerifiedSealBitmapFromHeader";

    public static final String FUNC_GETCOMPLETABLEATTESTATIONS = "getCompletableAttestations";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_GETATTESTATIONSTATS = "getAttestationStats";

    public static final String FUNC_VALIDATEATTESTATIONCODE = "validateAttestationCode";

    public static final String FUNC_VALIDATORSIGNERADDRESSFROMSET = "validatorSignerAddressFromSet";

    public static final String FUNC_GETATTESTATIONISSUERS = "getAttestationIssuers";

    public static final String FUNC_GETATTESTATIONREQUESTFEE = "getAttestationRequestFee";

    public static final String FUNC_HASHHEADER = "hashHeader";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_MINQUORUMSIZEINCURRENTSET = "minQuorumSizeInCurrentSet";

    public static final String FUNC_GETMAXATTESTATIONS = "getMaxAttestations";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_MAXATTESTATIONS = "maxAttestations";

    public static final String FUNC_NUMBERVALIDATORSINCURRENTSET = "numberValidatorsInCurrentSet";

    public static final String FUNC_SELECTISSUERSWAITBLOCKS = "selectIssuersWaitBlocks";

    public static final String FUNC_GETBLOCKNUMBERFROMHEADER = "getBlockNumberFromHeader";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_BATCHGETATTESTATIONSTATS = "batchGetAttestationStats";

    public static final String FUNC_GETEPOCHNUMBER = "getEpochNumber";

    public static final String FUNC_NUMBERVALIDATORSINSET = "numberValidatorsInSet";

    public static final String FUNC_SETATTESTATIONEXPIRYBLOCKS = "setAttestationExpiryBlocks";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_ATTESTATIONEXPIRYBLOCKS = "attestationExpiryBlocks";

    public static final String FUNC_GETATTESTATIONSTATE = "getAttestationState";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_ATTESTATIONREQUESTFEES = "attestationRequestFees";

    public static final String FUNC_SETMAXATTESTATIONS = "setMaxAttestations";

    public static final String FUNC_REQUEST = "request";

    public static final String FUNC_GETEPOCHSIZE = "getEpochSize";

    public static final String FUNC_SETSELECTISSUERSWAITBLOCKS = "setSelectIssuersWaitBlocks";

    public static final String FUNC_SELECTISSUERS = "selectIssuers";

    public static final String FUNC_GETUNSELECTEDREQUEST = "getUnselectedRequest";

    public static final String FUNC_MINQUORUMSIZE = "minQuorumSize";

    public static final String FUNC_PENDINGWITHDRAWALS = "pendingWithdrawals";

    public static final String FUNC_FRACTIONMULEXP = "fractionMulExp";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SETATTESTATIONREQUESTFEE = "setAttestationRequestFee";

    public static final String FUNC_GETPARENTSEALBITMAP = "getParentSealBitmap";

    public static final String FUNC_COMPLETE = "complete";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final Event ATTESTATIONSREQUESTED_EVENT =
            new Event(
                    "AttestationsRequested",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {},
                            new TypeReference<Address>() {}));;

    public static final Event ATTESTATIONISSUERSELECTED_EVENT =
            new Event(
                    "AttestationIssuerSelected",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>() {}));;

    public static final Event ATTESTATIONCOMPLETED_EVENT =
            new Event(
                    "AttestationCompleted",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event WITHDRAWAL_EVENT =
            new Event(
                    "Withdrawal",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {}));;

    public static final Event ATTESTATIONEXPIRYBLOCKSSET_EVENT =
            new Event(
                    "AttestationExpiryBlocksSet",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));;

    public static final Event ATTESTATIONREQUESTFEESET_EVENT =
            new Event(
                    "AttestationRequestFeeSet",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));;

    public static final Event SELECTISSUERSWAITBLOCKSSET_EVENT =
            new Event(
                    "SelectIssuersWaitBlocksSet",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));;

    public static final Event MAXATTESTATIONSSET_EVENT =
            new Event(
                    "MaxAttestationsSet",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));;

    public static final Event REGISTRYSET_EVENT =
            new Event(
                    "RegistrySet",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event OWNERSHIPTRANSFERRED_EVENT =
            new Event(
                    "OwnershipTransferred",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    @Deprecated
    protected Attestations(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Attestations(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Attestations(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Attestations(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<List> lookupAccountsForIdentifier(byte[] identifier) {
        final Function function =
                new Function(
                        FUNC_LOOKUPACCOUNTSFORIDENTIFIER,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(
                function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> validatorSignerAddressFromCurrentSet(BigInteger index) {
        final Function function =
                new Function(
                        FUNC_VALIDATORSIGNERADDRESSFROMCURRENTSET,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final Function function =
                new Function(
                        FUNC_INITIALIZED,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> checkProofOfPossession(
            String sender, byte[] blsKey, byte[] blsPop) {
        final Function function =
                new Function(
                        FUNC_CHECKPROOFOFPOSSESSION,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, sender),
                                new org.web3j.abi.datatypes.DynamicBytes(blsKey),
                                new org.web3j.abi.datatypes.DynamicBytes(blsPop)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getEpochNumberOfBlock(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_GETEPOCHNUMBEROFBLOCK,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getVerifiedSealBitmapFromHeader(byte[] header) {
        final Function function =
                new Function(
                        FUNC_GETVERIFIEDSEALBITMAPFROMHEADER,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(header)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, byte[]>>
            getCompletableAttestations(byte[] identifier, String account) {
        final Function function =
                new Function(
                        FUNC_GETCOMPLETABLEATTESTATIONS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.Address(160, account)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint32>>() {},
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<DynamicArray<Uint256>>() {},
                                new TypeReference<DynamicBytes>() {}));
        return new RemoteFunctionCall<
                Tuple4<List<BigInteger>, List<String>, List<BigInteger>, byte[]>>(
                function,
                new Callable<Tuple4<List<BigInteger>, List<String>, List<BigInteger>, byte[]>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<BigInteger>, byte[]> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<BigInteger>, byte[]>(
                                convertToNative((List<Uint32>) results.get(0).getValue()),
                                convertToNative((List<Address>) results.get(1).getValue()),
                                convertToNative((List<Uint256>) results.get(2).getValue()),
                                (byte[]) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(String token) {
        final Function function =
                new Function(
                        FUNC_WITHDRAW,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> getAttestationStats(
            byte[] identifier, String account) {
        final Function function =
                new Function(
                        FUNC_GETATTESTATIONSTATS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.Address(160, account)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(
                function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> validateAttestationCode(
            byte[] identifier, String account, BigInteger v, byte[] r, byte[] s) {
        final Function function =
                new Function(
                        FUNC_VALIDATEATTESTATIONCODE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.Address(160, account),
                                new org.web3j.abi.datatypes.generated.Uint8(v),
                                new org.web3j.abi.datatypes.generated.Bytes32(r),
                                new org.web3j.abi.datatypes.generated.Bytes32(s)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> validatorSignerAddressFromSet(
            BigInteger index, BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_VALIDATORSIGNERADDRESSFROMSET,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(index),
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getAttestationIssuers(byte[] identifier, String account) {
        final Function function =
                new Function(
                        FUNC_GETATTESTATIONISSUERS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.Address(160, account)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(
                function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getAttestationRequestFee(String token) {
        final Function function =
                new Function(
                        FUNC_GETATTESTATIONREQUESTFEE,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> hashHeader(byte[] header) {
        final Function function =
                new Function(
                        FUNC_HASHHEADER,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(header)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function =
                new Function(
                        FUNC_RENOUNCEOWNERSHIP,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> minQuorumSizeInCurrentSet() {
        final Function function =
                new Function(
                        FUNC_MINQUORUMSIZEINCURRENTSET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getMaxAttestations() {
        final Function function =
                new Function(
                        FUNC_GETMAXATTESTATIONS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> registry() {
        final Function function =
                new Function(
                        FUNC_REGISTRY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> maxAttestations() {
        final Function function =
                new Function(
                        FUNC_MAXATTESTATIONS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> numberValidatorsInCurrentSet() {
        final Function function =
                new Function(
                        FUNC_NUMBERVALIDATORSINCURRENTSET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> selectIssuersWaitBlocks() {
        final Function function =
                new Function(
                        FUNC_SELECTISSUERSWAITBLOCKS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getBlockNumberFromHeader(byte[] header) {
        final Function function =
                new Function(
                        FUNC_GETBLOCKNUMBERFROMHEADER,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(header)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function =
                new Function(
                        FUNC_OWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final Function function =
                new Function(
                        FUNC_ISOWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<
                    Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>
            batchGetAttestationStats(List<byte[]> identifiersToLookup) {
        final Function function =
                new Function(
                        FUNC_BATCHGETATTESTATIONSTATS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.DynamicArray<
                                        org.web3j.abi.datatypes.generated.Bytes32>(
                                        org.web3j.abi.datatypes.generated.Bytes32.class,
                                        org.web3j.abi.Utils.typeMap(
                                                identifiersToLookup,
                                                org.web3j.abi.datatypes.generated.Bytes32.class))),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {},
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<DynamicArray<Uint64>>() {},
                                new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteFunctionCall<
                Tuple4<List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>>(
                function,
                new Callable<
                        Tuple4<
                                List<BigInteger>,
                                List<String>,
                                List<BigInteger>,
                                List<BigInteger>>>() {
                    @Override
                    public Tuple4<
                                    List<BigInteger>,
                                    List<String>,
                                    List<BigInteger>,
                                    List<BigInteger>>
                            call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<
                                List<BigInteger>, List<String>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()),
                                convertToNative((List<Address>) results.get(1).getValue()),
                                convertToNative((List<Uint64>) results.get(2).getValue()),
                                convertToNative((List<Uint64>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getEpochNumber() {
        final Function function =
                new Function(
                        FUNC_GETEPOCHNUMBER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> numberValidatorsInSet(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_NUMBERVALIDATORSINSET,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setAttestationExpiryBlocks(
            BigInteger _attestationExpiryBlocks) {
        final Function function =
                new Function(
                        FUNC_SETATTESTATIONEXPIRYBLOCKS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(
                                        _attestationExpiryBlocks)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String registryAddress) {
        final Function function =
                new Function(
                        FUNC_SETREGISTRY,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, registryAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> attestationExpiryBlocks() {
        final Function function =
                new Function(
                        FUNC_ATTESTATIONEXPIRYBLOCKS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>> getAttestationState(
            byte[] identifier, String account, String issuer) {
        final Function function =
                new Function(
                        FUNC_GETATTESTATIONSTATE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.Address(160, account),
                                new org.web3j.abi.datatypes.Address(160, issuer)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint8>() {},
                                new TypeReference<Uint32>() {},
                                new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>>(
                function,
                new Callable<Tuple3<BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> revoke(byte[] identifier, BigInteger index) {
        final Function function =
                new Function(
                        FUNC_REVOKE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.generated.Uint256(index)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> attestationRequestFees(String param0) {
        final Function function =
                new Function(
                        FUNC_ATTESTATIONREQUESTFEES,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxAttestations(BigInteger _maxAttestations) {
        final Function function =
                new Function(
                        FUNC_SETMAXATTESTATIONS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(_maxAttestations)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> request(
            byte[] identifier,
            BigInteger attestationsRequested,
            String attestationRequestFeeToken) {
        final Function function =
                new Function(
                        FUNC_REQUEST,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.generated.Uint256(
                                        attestationsRequested),
                                new org.web3j.abi.datatypes.Address(
                                        160, attestationRequestFeeToken)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getEpochSize() {
        final Function function =
                new Function(
                        FUNC_GETEPOCHSIZE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setSelectIssuersWaitBlocks(
            BigInteger _selectIssuersWaitBlocks) {
        final Function function =
                new Function(
                        FUNC_SETSELECTISSUERSWAITBLOCKS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(
                                        _selectIssuersWaitBlocks)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> selectIssuers(byte[] identifier) {
        final Function function =
                new Function(
                        FUNC_SELECTISSUERS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>> getUnselectedRequest(
            byte[] identifier, String account) {
        final Function function =
                new Function(
                        FUNC_GETUNSELECTEDREQUEST,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.Address(160, account)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint32>() {},
                                new TypeReference<Uint32>() {},
                                new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, String>>(
                function,
                new Callable<Tuple3<BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> minQuorumSize(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_MINQUORUMSIZE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> pendingWithdrawals(String param0, String param1) {
        final Function function =
                new Function(
                        FUNC_PENDINGWITHDRAWALS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, param0),
                                new org.web3j.abi.datatypes.Address(160, param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> fractionMulExp(
            BigInteger aNumerator,
            BigInteger aDenominator,
            BigInteger bNumerator,
            BigInteger bDenominator,
            BigInteger exponent,
            BigInteger _decimals) {
        final Function function =
                new Function(
                        FUNC_FRACTIONMULEXP,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(aNumerator),
                                new org.web3j.abi.datatypes.generated.Uint256(aDenominator),
                                new org.web3j.abi.datatypes.generated.Uint256(bNumerator),
                                new org.web3j.abi.datatypes.generated.Uint256(bDenominator),
                                new org.web3j.abi.datatypes.generated.Uint256(exponent),
                                new org.web3j.abi.datatypes.generated.Uint256(_decimals)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(
                function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function =
                new Function(
                        FUNC_TRANSFEROWNERSHIP,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAttestationRequestFee(
            String token, BigInteger fee) {
        final Function function =
                new Function(
                        FUNC_SETATTESTATIONREQUESTFEE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, token),
                                new org.web3j.abi.datatypes.generated.Uint256(fee)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getParentSealBitmap(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_GETPARENTSEALBITMAP,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> complete(
            byte[] identifier, BigInteger v, byte[] r, byte[] s) {
        final Function function =
                new Function(
                        FUNC_COMPLETE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Bytes32(identifier),
                                new org.web3j.abi.datatypes.generated.Uint8(v),
                                new org.web3j.abi.datatypes.generated.Bytes32(r),
                                new org.web3j.abi.datatypes.generated.Bytes32(s)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(
            String registryAddress,
            BigInteger _attestationExpiryBlocks,
            BigInteger _selectIssuersWaitBlocks,
            BigInteger _maxAttestations,
            List<String> attestationRequestFeeTokens,
            List<BigInteger> attestationRequestFeeValues) {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, registryAddress),
                                new org.web3j.abi.datatypes.generated.Uint256(
                                        _attestationExpiryBlocks),
                                new org.web3j.abi.datatypes.generated.Uint256(
                                        _selectIssuersWaitBlocks),
                                new org.web3j.abi.datatypes.generated.Uint256(_maxAttestations),
                                new org.web3j.abi.datatypes.DynamicArray<
                                        org.web3j.abi.datatypes.Address>(
                                        org.web3j.abi.datatypes.Address.class,
                                        org.web3j.abi.Utils.typeMap(
                                                attestationRequestFeeTokens,
                                                org.web3j.abi.datatypes.Address.class)),
                                new org.web3j.abi.datatypes.DynamicArray<
                                        org.web3j.abi.datatypes.generated.Uint256>(
                                        org.web3j.abi.datatypes.generated.Uint256.class,
                                        org.web3j.abi.Utils.typeMap(
                                                attestationRequestFeeValues,
                                                org.web3j.abi.datatypes.generated.Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<AttestationsRequestedEventResponse> getAttestationsRequestedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ATTESTATIONSREQUESTED_EVENT, transactionReceipt);
        ArrayList<AttestationsRequestedEventResponse> responses =
                new ArrayList<AttestationsRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AttestationsRequestedEventResponse typedResponse =
                    new AttestationsRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.identifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.attestationsRequested =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.attestationRequestFeeToken =
                    (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AttestationsRequestedEventResponse> attestationsRequestedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, AttestationsRequestedEventResponse>() {
                            @Override
                            public AttestationsRequestedEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                ATTESTATIONSREQUESTED_EVENT, log);
                                AttestationsRequestedEventResponse typedResponse =
                                        new AttestationsRequestedEventResponse();
                                typedResponse.log = log;
                                typedResponse.identifier =
                                        (byte[]) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.account =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                typedResponse.attestationsRequested =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                typedResponse.attestationRequestFeeToken =
                                        (String)
                                                eventValues.getNonIndexedValues().get(1).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<AttestationsRequestedEventResponse> attestationsRequestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ATTESTATIONSREQUESTED_EVENT));
        return attestationsRequestedEventFlowable(filter);
    }

    public List<AttestationIssuerSelectedEventResponse> getAttestationIssuerSelectedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ATTESTATIONISSUERSELECTED_EVENT, transactionReceipt);
        ArrayList<AttestationIssuerSelectedEventResponse> responses =
                new ArrayList<AttestationIssuerSelectedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AttestationIssuerSelectedEventResponse typedResponse =
                    new AttestationIssuerSelectedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.identifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.attestationRequestFeeToken =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AttestationIssuerSelectedEventResponse> attestationIssuerSelectedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, AttestationIssuerSelectedEventResponse>() {
                            @Override
                            public AttestationIssuerSelectedEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                ATTESTATIONISSUERSELECTED_EVENT, log);
                                AttestationIssuerSelectedEventResponse typedResponse =
                                        new AttestationIssuerSelectedEventResponse();
                                typedResponse.log = log;
                                typedResponse.identifier =
                                        (byte[]) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.account =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                typedResponse.issuer =
                                        (String) eventValues.getIndexedValues().get(2).getValue();
                                typedResponse.attestationRequestFeeToken =
                                        (String)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<AttestationIssuerSelectedEventResponse> attestationIssuerSelectedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ATTESTATIONISSUERSELECTED_EVENT));
        return attestationIssuerSelectedEventFlowable(filter);
    }

    public List<AttestationCompletedEventResponse> getAttestationCompletedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ATTESTATIONCOMPLETED_EVENT, transactionReceipt);
        ArrayList<AttestationCompletedEventResponse> responses =
                new ArrayList<AttestationCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AttestationCompletedEventResponse typedResponse =
                    new AttestationCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.identifier = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AttestationCompletedEventResponse> attestationCompletedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, AttestationCompletedEventResponse>() {
                            @Override
                            public AttestationCompletedEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                ATTESTATIONCOMPLETED_EVENT, log);
                                AttestationCompletedEventResponse typedResponse =
                                        new AttestationCompletedEventResponse();
                                typedResponse.log = log;
                                typedResponse.identifier =
                                        (byte[]) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.account =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                typedResponse.issuer =
                                        (String) eventValues.getIndexedValues().get(2).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<AttestationCompletedEventResponse> attestationCompletedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ATTESTATIONCOMPLETED_EVENT));
        return attestationCompletedEventFlowable(filter);
    }

    public List<WithdrawalEventResponse> getWithdrawalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses =
                new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<Log, WithdrawalEventResponse>() {
                            @Override
                            public WithdrawalEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(WITHDRAWAL_EVENT, log);
                                WithdrawalEventResponse typedResponse =
                                        new WithdrawalEventResponse();
                                typedResponse.log = log;
                                typedResponse.account =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.token =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                typedResponse.amount =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public List<AttestationExpiryBlocksSetEventResponse> getAttestationExpiryBlocksSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ATTESTATIONEXPIRYBLOCKSSET_EVENT, transactionReceipt);
        ArrayList<AttestationExpiryBlocksSetEventResponse> responses =
                new ArrayList<AttestationExpiryBlocksSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AttestationExpiryBlocksSetEventResponse typedResponse =
                    new AttestationExpiryBlocksSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AttestationExpiryBlocksSetEventResponse>
            attestationExpiryBlocksSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, AttestationExpiryBlocksSetEventResponse>() {
                            @Override
                            public AttestationExpiryBlocksSetEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                ATTESTATIONEXPIRYBLOCKSSET_EVENT, log);
                                AttestationExpiryBlocksSetEventResponse typedResponse =
                                        new AttestationExpiryBlocksSetEventResponse();
                                typedResponse.log = log;
                                typedResponse.value =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<AttestationExpiryBlocksSetEventResponse>
            attestationExpiryBlocksSetEventFlowable(
                    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ATTESTATIONEXPIRYBLOCKSSET_EVENT));
        return attestationExpiryBlocksSetEventFlowable(filter);
    }

    public List<AttestationRequestFeeSetEventResponse> getAttestationRequestFeeSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ATTESTATIONREQUESTFEESET_EVENT, transactionReceipt);
        ArrayList<AttestationRequestFeeSetEventResponse> responses =
                new ArrayList<AttestationRequestFeeSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AttestationRequestFeeSetEventResponse typedResponse =
                    new AttestationRequestFeeSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AttestationRequestFeeSetEventResponse> attestationRequestFeeSetEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, AttestationRequestFeeSetEventResponse>() {
                            @Override
                            public AttestationRequestFeeSetEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                ATTESTATIONREQUESTFEESET_EVENT, log);
                                AttestationRequestFeeSetEventResponse typedResponse =
                                        new AttestationRequestFeeSetEventResponse();
                                typedResponse.log = log;
                                typedResponse.token =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.value =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<AttestationRequestFeeSetEventResponse> attestationRequestFeeSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ATTESTATIONREQUESTFEESET_EVENT));
        return attestationRequestFeeSetEventFlowable(filter);
    }

    public List<SelectIssuersWaitBlocksSetEventResponse> getSelectIssuersWaitBlocksSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(SELECTISSUERSWAITBLOCKSSET_EVENT, transactionReceipt);
        ArrayList<SelectIssuersWaitBlocksSetEventResponse> responses =
                new ArrayList<SelectIssuersWaitBlocksSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SelectIssuersWaitBlocksSetEventResponse typedResponse =
                    new SelectIssuersWaitBlocksSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SelectIssuersWaitBlocksSetEventResponse>
            selectIssuersWaitBlocksSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, SelectIssuersWaitBlocksSetEventResponse>() {
                            @Override
                            public SelectIssuersWaitBlocksSetEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                SELECTISSUERSWAITBLOCKSSET_EVENT, log);
                                SelectIssuersWaitBlocksSetEventResponse typedResponse =
                                        new SelectIssuersWaitBlocksSetEventResponse();
                                typedResponse.log = log;
                                typedResponse.value =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<SelectIssuersWaitBlocksSetEventResponse>
            selectIssuersWaitBlocksSetEventFlowable(
                    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SELECTISSUERSWAITBLOCKSSET_EVENT));
        return selectIssuersWaitBlocksSetEventFlowable(filter);
    }

    public List<MaxAttestationsSetEventResponse> getMaxAttestationsSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(MAXATTESTATIONSSET_EVENT, transactionReceipt);
        ArrayList<MaxAttestationsSetEventResponse> responses =
                new ArrayList<MaxAttestationsSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MaxAttestationsSetEventResponse typedResponse = new MaxAttestationsSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MaxAttestationsSetEventResponse> maxAttestationsSetEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, MaxAttestationsSetEventResponse>() {
                            @Override
                            public MaxAttestationsSetEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                MAXATTESTATIONSSET_EVENT, log);
                                MaxAttestationsSetEventResponse typedResponse =
                                        new MaxAttestationsSetEventResponse();
                                typedResponse.log = log;
                                typedResponse.value =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<MaxAttestationsSetEventResponse> maxAttestationsSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MAXATTESTATIONSSET_EVENT));
        return maxAttestationsSetEventFlowable(filter);
    }

    public List<RegistrySetEventResponse> getRegistrySetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(REGISTRYSET_EVENT, transactionReceipt);
        ArrayList<RegistrySetEventResponse> responses =
                new ArrayList<RegistrySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registryAddress =
                    (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<Log, RegistrySetEventResponse>() {
                            @Override
                            public RegistrySetEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(REGISTRYSET_EVENT, log);
                                RegistrySetEventResponse typedResponse =
                                        new RegistrySetEventResponse();
                                typedResponse.log = log;
                                typedResponse.registryAddress =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYSET_EVENT));
        return registrySetEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses =
                new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse =
                    new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, OwnershipTransferredEventResponse>() {
                            @Override
                            public OwnershipTransferredEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                OWNERSHIPTRANSFERRED_EVENT, log);
                                OwnershipTransferredEventResponse typedResponse =
                                        new OwnershipTransferredEventResponse();
                                typedResponse.log = log;
                                typedResponse.previousOwner =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.newOwner =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static Attestations load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new Attestations(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Attestations load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new Attestations(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Attestations load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Attestations(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Attestations load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new Attestations(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Attestations> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                Attestations.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Attestations> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                Attestations.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Attestations> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                Attestations.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Attestations> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                Attestations.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AttestationsRequestedEventResponse extends BaseEventResponse {
        public byte[] identifier;

        public String account;

        public BigInteger attestationsRequested;

        public String attestationRequestFeeToken;
    }

    public static class AttestationIssuerSelectedEventResponse extends BaseEventResponse {
        public byte[] identifier;

        public String account;

        public String issuer;

        public String attestationRequestFeeToken;
    }

    public static class AttestationCompletedEventResponse extends BaseEventResponse {
        public byte[] identifier;

        public String account;

        public String issuer;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String account;

        public String token;

        public BigInteger amount;
    }

    public static class AttestationExpiryBlocksSetEventResponse extends BaseEventResponse {
        public BigInteger value;
    }

    public static class AttestationRequestFeeSetEventResponse extends BaseEventResponse {
        public String token;

        public BigInteger value;
    }

    public static class SelectIssuersWaitBlocksSetEventResponse extends BaseEventResponse {
        public BigInteger value;
    }

    public static class MaxAttestationsSetEventResponse extends BaseEventResponse {
        public BigInteger value;
    }

    public static class RegistrySetEventResponse extends BaseEventResponse {
        public String registryAddress;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
