/*
 * Copyright 2020 Web3 Labs Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.web3j.console;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.reactivex.Flowable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class StableToken extends Contract {
    public static final String BINARY =
            "";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_VALIDATORSIGNERADDRESSFROMCURRENTSET =
            "validatorSignerAddressFromCurrentSet";

    public static final String FUNC_VALUETOUNITS = "valueToUnits";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_SETINFLATIONPARAMETERS = "setInflationParameters";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_CHECKPROOFOFPOSSESSION = "checkProofOfPossession";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_GETEPOCHNUMBEROFBLOCK = "getEpochNumberOfBlock";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETVERIFIEDSEALBITMAPFROMHEADER =
            "getVerifiedSealBitmapFromHeader";

    public static final String FUNC_DEBITGASFEES = "debitGasFees";

    public static final String FUNC_VALIDATORSIGNERADDRESSFROMSET = "validatorSignerAddressFromSet";

    public static final String FUNC_HASHHEADER = "hashHeader";

    public static final String FUNC_CREDITGASFEES = "creditGasFees";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_MINQUORUMSIZEINCURRENTSET = "minQuorumSizeInCurrentSet";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NUMBERVALIDATORSINCURRENTSET = "numberValidatorsInCurrentSet";

    public static final String FUNC_GETBLOCKNUMBERFROMHEADER = "getBlockNumberFromHeader";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_GETEPOCHNUMBER = "getEpochNumber";

    public static final String FUNC_NUMBERVALIDATORSINSET = "numberValidatorsInSet";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_GETINFLATIONPARAMETERS = "getInflationParameters";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_UNITSTOVALUE = "unitsToValue";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_GETEPOCHSIZE = "getEpochSize";

    public static final String FUNC_TRANSFERWITHCOMMENT = "transferWithComment";

    public static final String FUNC_MINQUORUMSIZE = "minQuorumSize";

    public static final String FUNC_FRACTIONMULEXP = "fractionMulExp";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETPARENTSEALBITMAP = "getParentSealBitmap";

    public static final Event INFLATIONFACTORUPDATED_EVENT =
            new Event(
                    "InflationFactorUpdated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));;

    public static final Event INFLATIONPARAMETERSUPDATED_EVENT =
            new Event(
                    "InflationParametersUpdated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Uint256>() {},
                            new TypeReference<Uint256>() {},
                            new TypeReference<Uint256>() {}));;

    public static final Event TRANSFER_EVENT =
            new Event(
                    "Transfer",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {}));;

    public static final Event TRANSFERCOMMENT_EVENT =
            new Event(
                    "TransferComment",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));;

    public static final Event APPROVAL_EVENT =
            new Event(
                    "Approval",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>() {}));;

    public static final Event REGISTRYSET_EVENT =
            new Event(
                    "RegistrySet",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event OWNERSHIPTRANSFERRED_EVENT =
            new Event(
                    "OwnershipTransferred",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    @Deprecated
    protected StableToken(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected StableToken(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected StableToken(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected StableToken(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> name() {
        final Function function =
                new Function(
                        FUNC_NAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, spender),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> validatorSignerAddressFromCurrentSet(BigInteger index) {
        final Function function =
                new Function(
                        FUNC_VALIDATORSIGNERADDRESSFROMCURRENTSET,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> valueToUnits(BigInteger value) {
        final Function function =
                new Function(
                        FUNC_VALUETOUNITS,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final Function function =
                new Function(
                        FUNC_INITIALIZED,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function =
                new Function(
                        FUNC_TOTALSUPPLY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setInflationParameters(
            BigInteger rate, BigInteger updatePeriod) {
        final Function function =
                new Function(
                        FUNC_SETINFLATIONPARAMETERS,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(rate),
                                new org.web3j.abi.datatypes.generated.Uint256(updatePeriod)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(
            String from, String to, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_TRANSFERFROM,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, from),
                                new org.web3j.abi.datatypes.Address(160, to),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkProofOfPossession(
            String sender, byte[] blsKey, byte[] blsPop) {
        final Function function =
                new Function(
                        FUNC_CHECKPROOFOFPOSSESSION,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, sender),
                                new org.web3j.abi.datatypes.DynamicBytes(blsKey),
                                new org.web3j.abi.datatypes.DynamicBytes(blsPop)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function =
                new Function(
                        FUNC_DECIMALS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseAllowance(
            String spender, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_INCREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, spender),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getEpochNumberOfBlock(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_GETEPOCHNUMBEROFBLOCK,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_MINT,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, to),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger value) {
        final Function function =
                new Function(
                        FUNC_BURN,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getVerifiedSealBitmapFromHeader(byte[] header) {
        final Function function =
                new Function(
                        FUNC_GETVERIFIEDSEALBITMAPFROMHEADER,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(header)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> debitGasFees(String from, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_DEBITGASFEES,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, from),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> validatorSignerAddressFromSet(
            BigInteger index, BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_VALIDATORSIGNERADDRESSFROMSET,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(index),
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> hashHeader(byte[] header) {
        final Function function =
                new Function(
                        FUNC_HASHHEADER,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(header)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> creditGasFees(
            String from,
            String feeRecipient,
            String gatewayFeeRecipient,
            String communityFund,
            BigInteger refund,
            BigInteger tipTxFee,
            BigInteger gatewayFee,
            BigInteger baseTxFee) {
        final Function function =
                new Function(
                        FUNC_CREDITGASFEES,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, from),
                                new org.web3j.abi.datatypes.Address(160, feeRecipient),
                                new org.web3j.abi.datatypes.Address(160, gatewayFeeRecipient),
                                new org.web3j.abi.datatypes.Address(160, communityFund),
                                new org.web3j.abi.datatypes.generated.Uint256(refund),
                                new org.web3j.abi.datatypes.generated.Uint256(tipTxFee),
                                new org.web3j.abi.datatypes.generated.Uint256(gatewayFee),
                                new org.web3j.abi.datatypes.generated.Uint256(baseTxFee)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String accountOwner) {
        final Function function =
                new Function(
                        FUNC_BALANCEOF,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, accountOwner)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function =
                new Function(
                        FUNC_RENOUNCEOWNERSHIP,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> minQuorumSizeInCurrentSet() {
        final Function function =
                new Function(
                        FUNC_MINQUORUMSIZEINCURRENTSET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> registry() {
        final Function function =
                new Function(
                        FUNC_REGISTRY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(
            String _name,
            String _symbol,
            BigInteger _decimals,
            String registryAddress,
            BigInteger inflationRate,
            BigInteger inflationFactorUpdatePeriod,
            List<String> initialBalanceAddresses,
            List<BigInteger> initialBalanceValues) {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Utf8String(_name),
                                new org.web3j.abi.datatypes.Utf8String(_symbol),
                                new org.web3j.abi.datatypes.generated.Uint8(_decimals),
                                new org.web3j.abi.datatypes.Address(160, registryAddress),
                                new org.web3j.abi.datatypes.generated.Uint256(inflationRate),
                                new org.web3j.abi.datatypes.generated.Uint256(
                                        inflationFactorUpdatePeriod),
                                new org.web3j.abi.datatypes.DynamicArray<
                                        org.web3j.abi.datatypes.Address>(
                                        org.web3j.abi.datatypes.Address.class,
                                        org.web3j.abi.Utils.typeMap(
                                                initialBalanceAddresses,
                                                org.web3j.abi.datatypes.Address.class)),
                                new org.web3j.abi.datatypes.DynamicArray<
                                        org.web3j.abi.datatypes.generated.Uint256>(
                                        org.web3j.abi.datatypes.generated.Uint256.class,
                                        org.web3j.abi.Utils.typeMap(
                                                initialBalanceValues,
                                                org.web3j.abi.datatypes.generated.Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> numberValidatorsInCurrentSet() {
        final Function function =
                new Function(
                        FUNC_NUMBERVALIDATORSINCURRENTSET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getBlockNumberFromHeader(byte[] header) {
        final Function function =
                new Function(
                        FUNC_GETBLOCKNUMBERFROMHEADER,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(header)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function =
                new Function(
                        FUNC_OWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final Function function =
                new Function(
                        FUNC_ISOWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function =
                new Function(
                        FUNC_SYMBOL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getEpochNumber() {
        final Function function =
                new Function(
                        FUNC_GETEPOCHNUMBER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> numberValidatorsInSet(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_NUMBERVALIDATORSINSET,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> decreaseAllowance(
            String spender, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_DECREASEALLOWANCE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, spender),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>
            getInflationParameters() {
        final Function function =
                new Function(
                        FUNC_GETINFLATIONPARAMETERS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(
                function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final Function function =
                new Function(
                        FUNC_TRANSFER,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, to),
                                new org.web3j.abi.datatypes.generated.Uint256(value)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String registryAddress) {
        final Function function =
                new Function(
                        FUNC_SETREGISTRY,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, registryAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> unitsToValue(BigInteger units) {
        final Function function =
                new Function(
                        FUNC_UNITSTOVALUE,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(units)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String accountOwner, String spender) {
        final Function function =
                new Function(
                        FUNC_ALLOWANCE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, accountOwner),
                                new org.web3j.abi.datatypes.Address(160, spender)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getEpochSize() {
        final Function function =
                new Function(
                        FUNC_GETEPOCHSIZE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferWithComment(
            String to, BigInteger value, String comment) {
        final Function function =
                new Function(
                        FUNC_TRANSFERWITHCOMMENT,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.Address(160, to),
                                new org.web3j.abi.datatypes.generated.Uint256(value),
                                new org.web3j.abi.datatypes.Utf8String(comment)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> minQuorumSize(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_MINQUORUMSIZE,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> fractionMulExp(
            BigInteger aNumerator,
            BigInteger aDenominator,
            BigInteger bNumerator,
            BigInteger bDenominator,
            BigInteger exponent,
            BigInteger _decimals) {
        final Function function =
                new Function(
                        FUNC_FRACTIONMULEXP,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(aNumerator),
                                new org.web3j.abi.datatypes.generated.Uint256(aDenominator),
                                new org.web3j.abi.datatypes.generated.Uint256(bNumerator),
                                new org.web3j.abi.datatypes.generated.Uint256(bDenominator),
                                new org.web3j.abi.datatypes.generated.Uint256(exponent),
                                new org.web3j.abi.datatypes.generated.Uint256(_decimals)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(
                function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function =
                new Function(
                        FUNC_TRANSFEROWNERSHIP,
                        Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getParentSealBitmap(BigInteger blockNumber) {
        final Function function =
                new Function(
                        FUNC_GETPARENTSEALBITMAP,
                        Arrays.<Type>asList(
                                new org.web3j.abi.datatypes.generated.Uint256(blockNumber)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public List<InflationFactorUpdatedEventResponse> getInflationFactorUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INFLATIONFACTORUPDATED_EVENT, transactionReceipt);
        ArrayList<InflationFactorUpdatedEventResponse> responses =
                new ArrayList<InflationFactorUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InflationFactorUpdatedEventResponse typedResponse =
                    new InflationFactorUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.factor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lastUpdated =
                    (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InflationFactorUpdatedEventResponse> inflationFactorUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, InflationFactorUpdatedEventResponse>() {
                            @Override
                            public InflationFactorUpdatedEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                INFLATIONFACTORUPDATED_EVENT, log);
                                InflationFactorUpdatedEventResponse typedResponse =
                                        new InflationFactorUpdatedEventResponse();
                                typedResponse.log = log;
                                typedResponse.factor =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                typedResponse.lastUpdated =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(1).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<InflationFactorUpdatedEventResponse> inflationFactorUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INFLATIONFACTORUPDATED_EVENT));
        return inflationFactorUpdatedEventFlowable(filter);
    }

    public List<InflationParametersUpdatedEventResponse> getInflationParametersUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INFLATIONPARAMETERSUPDATED_EVENT, transactionReceipt);
        ArrayList<InflationParametersUpdatedEventResponse> responses =
                new ArrayList<InflationParametersUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InflationParametersUpdatedEventResponse typedResponse =
                    new InflationParametersUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.updatePeriod =
                    (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lastUpdated =
                    (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InflationParametersUpdatedEventResponse>
            inflationParametersUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, InflationParametersUpdatedEventResponse>() {
                            @Override
                            public InflationParametersUpdatedEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                INFLATIONPARAMETERSUPDATED_EVENT, log);
                                InflationParametersUpdatedEventResponse typedResponse =
                                        new InflationParametersUpdatedEventResponse();
                                typedResponse.log = log;
                                typedResponse.rate =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                typedResponse.updatePeriod =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(1).getValue();
                                typedResponse.lastUpdated =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(2).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<InflationParametersUpdatedEventResponse>
            inflationParametersUpdatedEventFlowable(
                    DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INFLATIONPARAMETERSUPDATED_EVENT));
        return inflationParametersUpdatedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses =
                new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<Log, TransferEventResponse>() {
                            @Override
                            public TransferEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(TRANSFER_EVENT, log);
                                TransferEventResponse typedResponse = new TransferEventResponse();
                                typedResponse.log = log;
                                typedResponse.from =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.to =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                typedResponse.value =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<TransferCommentEventResponse> getTransferCommentEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(TRANSFERCOMMENT_EVENT, transactionReceipt);
        ArrayList<TransferCommentEventResponse> responses =
                new ArrayList<TransferCommentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferCommentEventResponse typedResponse = new TransferCommentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.comment = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferCommentEventResponse> transferCommentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<Log, TransferCommentEventResponse>() {
                            @Override
                            public TransferCommentEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(TRANSFERCOMMENT_EVENT, log);
                                TransferCommentEventResponse typedResponse =
                                        new TransferCommentEventResponse();
                                typedResponse.log = log;
                                typedResponse.comment =
                                        (String)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<TransferCommentEventResponse> transferCommentEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERCOMMENT_EVENT));
        return transferCommentEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses =
                new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
                            @Override
                            public ApprovalEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(APPROVAL_EVENT, log);
                                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                                typedResponse.log = log;
                                typedResponse.owner =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.spender =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                typedResponse.value =
                                        (BigInteger)
                                                eventValues.getNonIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<RegistrySetEventResponse> getRegistrySetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(REGISTRYSET_EVENT, transactionReceipt);
        ArrayList<RegistrySetEventResponse> responses =
                new ArrayList<RegistrySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registryAddress =
                    (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<Log, RegistrySetEventResponse>() {
                            @Override
                            public RegistrySetEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(REGISTRYSET_EVENT, log);
                                RegistrySetEventResponse typedResponse =
                                        new RegistrySetEventResponse();
                                typedResponse.log = log;
                                typedResponse.registryAddress =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYSET_EVENT));
        return registrySetEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses =
                new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse =
                    new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter)
                .map(
                        new io.reactivex.functions.Function<
                                Log, OwnershipTransferredEventResponse>() {
                            @Override
                            public OwnershipTransferredEventResponse apply(Log log) {
                                Contract.EventValuesWithLog eventValues =
                                        extractEventParametersWithLog(
                                                OWNERSHIPTRANSFERRED_EVENT, log);
                                OwnershipTransferredEventResponse typedResponse =
                                        new OwnershipTransferredEventResponse();
                                typedResponse.log = log;
                                typedResponse.previousOwner =
                                        (String) eventValues.getIndexedValues().get(0).getValue();
                                typedResponse.newOwner =
                                        (String) eventValues.getIndexedValues().get(1).getValue();
                                return typedResponse;
                            }
                        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static StableToken load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new StableToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static StableToken load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new StableToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static StableToken load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new StableToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static StableToken load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new StableToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<StableToken> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                StableToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StableToken> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                StableToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<StableToken> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                StableToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<StableToken> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                StableToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class InflationFactorUpdatedEventResponse extends BaseEventResponse {
        public BigInteger factor;

        public BigInteger lastUpdated;
    }

    public static class InflationParametersUpdatedEventResponse extends BaseEventResponse {
        public BigInteger rate;

        public BigInteger updatePeriod;

        public BigInteger lastUpdated;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class TransferCommentEventResponse extends BaseEventResponse {
        public String comment;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class RegistrySetEventResponse extends BaseEventResponse {
        public String registryAddress;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
